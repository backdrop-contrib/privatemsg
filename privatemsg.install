<?php

/**
 * @file
 * Install file for privatemsg.module
 */

/**
 * Implements hook_schema().
 */
function privatemsg_schema() {
  $schema = array();
  $schema['pm_index'] = array(
    'description' => '{pm_index} holds indexing information about messages and recipients for fast retrieval',
    'fields' => array(
      'mid' => array(
        'description' => 'Private Message ID',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'thread_id' => array(
        'description' => 'Messages thread ID',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'recipient' => array(
        'description' => 'ID of the recipient object, typically user',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'is_new' => array(
        'description' => 'Whether the user has read this message',
        'type' => 'int',
        'default' => 1,
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'deleted' => array(
        'description' => 'Whether the user has deleted this message',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'type' => array(
        'description' => 'Type of recipient object',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'user'
      ),
    ),
    'primary key' => array('mid', 'recipient', 'type'),
    'indexes' => array(
      'list' => array('recipient', 'type', 'deleted', 'is_new'),
      'messages' => array('mid', 'recipient', 'type'),
      'participants' => array('thread_id', 'recipient', 'type', 'deleted'),
    ),
  );

  $schema['pm_message'] = array(
    'description' => '{pm_messages} holds the message information',
    'fields' => array(
      'mid' => array(
        'description' => 'Private Message ID',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'author' => array(
        'description' => 'UID of the author',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'subject' => array(
        'description' => 'Subject text of the message',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'body' => array(
        'description' => 'Body of the message',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The {filter_formats}.format of the message text.',
      ),
      'timestamp' => array(
        'description' => 'Time when the message was sent',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'has_tokens' => array(
        'description' => 'Indicates if the message has tokens',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('mid'),
  );

  $schema['pm_disable'] = array(
    'description' => '{pm_disable} holds the list of users that have disabled private messaging',
    'fields' => array(
      'uid' => array(
        'description' => 'ID of the user',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('uid'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function privatemsg_install() {
  // Define default formats for date format types.
  $config = config('system.date');
  $config->set("formats.privatemsg_current_day", array(
    'label' => 'Private messages: Current day',
    'pattern' => 'g:i a',
    'module' => 'privatemsg',
  ));
  $config->set("formats.privatemsg_current_year", array(
    'label' => 'Private messages: Current year',
    'pattern' => 'M j',
    'module' => 'privatemsg',
  ));
  $config->set("formats.privatemsg_years", array(
    'label' => 'Private messages: years',
    'pattern' => 'n/j/y',
    'module' => 'privatemsg',
  ));
  $config->save();
}

/**
 * Implements hook_update_last_removed().
 */
function privatemsg_update_last_removed() {
  return 7006;
}

/**
 * Convert privatemsg variables to config.
 */
function privatemsg_update_1000() {
  // Base module
  $config = config('privatemsg.settings');
  $config->set('private_message_view_template', update_variable_get('private_message_view_template', 'privatemsg-view'));
  $config->set('display_loginmessage', update_variable_get('privatemsg_display_loginmessage', TRUE));
  $config->set('display_disabled_message', update_variable_get('privatemsg_display_disabled_message', TRUE));
  $config->set('default_redirect', update_variable_get('privatemsg_default_redirect', '<new-message>'));
  $config->set('default_redirect_reply', update_variable_get('privatemsg_default_redirect_reply', FALSE));

  $config->set('display_preview_button', update_variable_get('privatemsg_display_preview_button', FALSE));
  $config->set('flush_enabled', update_variable_get('privatemsg_flush_enabled', FALSE));
  $config->set('flush_days', update_variable_get('privatemsg_flush_days', 30));
  $config->set('flush_max', update_variable_get('privatemsg_flush_max', 200));
  $config->set('per_page', update_variable_get('privatemsg_per_page', 25));

  $config->set('display_fields', update_variable_get('privatemsg_display_fields', array('participants')));
  $config->set('view_max_amount', update_variable_get('privatemsg_view_max_amount', 20));
  $config->set('view_use_max_as_default', update_variable_get('privatemsg_view_use_max_as_default', FALSE));
  $config->set('view_default_amount', update_variable_get('privatemsg_view_default_amount', 10));
  $config->set('display_link_self', update_variable_get('privatemsg_display_link_self', TRUE));

  $config->set('display_profile_links', update_variable_get('privatemsg_display_profile_links', 1));
  $config->set('link_node_types', update_variable_get('privatemsg_link_node_types', array()));
  $config->set('display_on_teaser', update_variable_get('privatemsg_display_on_teaser', 1));
  $config->set('display_on_comments', update_variable_get('privatemsg_display_on_comments', 0));

  $config->set('cron_recipient_per_run', update_variable_get('privatemsg_cron_recipient_per_run', 1000));
  $config->set('no_messages_notification', update_variable_get('privatemsg_no_messages_notification', 0));
  $config->set('recipient_small_threshold', update_variable_get('privatemsg_recipient_small_threshold', 100));
  $config->save();

  // privatemsg_realname
  $config = config('privatemsg_realname.settings');
  $config->set('search_username', update_variable_get('privatemsg_realname_search_username', TRUE));
  $config->set('unique_identifier', update_variable_get('privatemsg_realname_unique_identifier', 'name'));
  $config->save();

  // pm_email_notify
  $config = config('pm_email_notify.settings');
  $config->set('subject', update_variable_get('pm_email_notify_subject', 'New private message at [site:name].'));
  $config->set('body', update_variable_get('pm_email_notify_body', "Hi [privatemsg_message:recipient],\n\nThis is an automatic reminder from the site [site:name]. You have received a new private message from [privatemsg_message:author].\n\nTo read your message, follow this link:\n[privatemsg_message:url]\n\nIf you don't want to receive these emails again, change your preferences here:\n[privatemsg_message:recipient:edit-url]"));
  $config->set('default', update_variable_get('pm_email_notify_default', TRUE));
  $config->set('from', update_variable_get('pm_email_notify_from', ''));
  $config->save();

  // pm_block_user
  $config = config('pm_block_user.settings');
  $config->set('actions', update_variable_get('pm_block_user_actions', array()));
  $config->save();

  // privatemsg_filter
  $config = config('privatemsg_filter.settings');
  $config->set('inbox_tag', update_variable_get('privatemsg_filter_inbox_tag', ''));
  $config->set('searchbody', update_variable_get('privatemsg_filter_searchbody', FALSE));
  $config->set('default_list', update_variable_get('privatemsg_filter_default_list', 0));
  $config->save();

  // privatemsg_limits
  $config = config('privatemsg_limits.settings');
  $config->set('messages_per_thread', update_variable_get('privatemsg_limits_messages_per_thread', 0));
  $config->set('messages_per_thread_action', update_variable_get('privatemsg_limits_messages_per_thread_action', 'create-new'));
  $config->set('recipients_enabled', update_variable_get('privatemsg_limits_recipients_enabled', FALSE));
  $config->set('recipients_amount', update_variable_get('privatemsg_limits_recipients_amount', 0));
  $config->set('send_enabled', update_variable_get('privatemsg_limits_send_enabled', FALSE));
  $config->set('send_object', update_variable_get('privatemsg_limits_send_object', 'message'));
  $config->set('send_amount', update_variable_get('privatemsg_limits_send_amount', 0));
  $config->set('send_timeframe', update_variable_get('privatemsg_limits_send_timeframe', 3600));
  $config->set('receive_enabled', update_variable_get('privatemsg_limits_receive_enabled', FALSE));
  $config->set('receive_object', update_variable_get('privatemsg_limits_receive_object', 'message'));
  $config->set('receive_amount', update_variable_get('privatemsg_limits_receive_amount', 0));
  foreach (array_keys(user_roles(TRUE)) as $role) {
    foreach (array('send', 'receive', 'recipients') as $option) {
      $setting = 'privatemsg_limits_' . $option . '_amount_role_' . $role;
      $config->set($setting, update_variable_get($setting));
    }
  }
  $config->save();

  // Delete variables.
  update_variable_del('private_message_view_template');
  update_variable_del('privatemsg_display_loginmessage');
  update_variable_del('privatemsg_display_disabled_message');
  update_variable_del('privatemsg_default_redirect');
  update_variable_del('privatemsg_default_redirect_reply');

  update_variable_del('privatemsg_display_preview_button');
  update_variable_del('privatemsg_flush_enabled');
  update_variable_del('privatemsg_flush_days');
  update_variable_del('privatemsg_flush_max');
  update_variable_del('privatemsg_per_page');

  update_variable_del('privatemsg_display_fields');
  update_variable_del('privatemsg_view_max_amount');
  update_variable_del('privatemsg_view_use_max_as_default');
  update_variable_del('privatemsg_view_default_amount');
  update_variable_del('privatemsg_display_link_self');

  update_variable_del('privatemsg_display_profile_links');
  update_variable_del('privatemsg_link_node_types');
  update_variable_del('privatemsg_display_on_teaser');
  update_variable_del('privatemsg_display_on_comments');
  update_variable_del('privatemsg_filter_inbox_tag');

  update_variable_del('privatemsg_cron_recipient_per_run');
  update_variable_del('privatemsg_cron_recipient_process');
  update_variable_del('privatemsg_no_messages_notification');
  update_variable_del('privatemsg_recipient_small_threshold');

  update_variable_del('pm_block_user_actions');

  update_variable_del('pm_email_notify_subject');
  update_variable_del('pm_email_notify_body');
  update_variable_del('pm_email_notify_default');
  update_variable_del('pm_email_notify_from');

  update_variable_del('privatemsg_limits_messages_per_thread');
  update_variable_del('privatemsg_limits_messages_per_thread_action');
  update_variable_del('privatemsg_limits_recipients_enabled');
  update_variable_del('privatemsg_limits_recipients_amount');
  update_variable_del('privatemsg_limits_send_enabled');
  update_variable_del('privatemsg_limits_send_object');
  update_variable_del('privatemsg_limits_send_amount');
  update_variable_del('privatemsg_limits_send_timeframe');
  update_variable_del('privatemsg_limits_receive_enabled');
  update_variable_del('privatemsg_limits_receive_object');
  update_variable_del('privatemsg_limits_receive_amount');
}
