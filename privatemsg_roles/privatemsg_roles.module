<?php

/**
 * @file
 * Allows to send messages to all members of a role.
 */

/**
 * Implements hook_perm().
 */
function privatemsg_roles_permission() {
  return array(
    'write privatemsg to roles' => array(
      'title' => t('Write private message to roles'),
      'description' => t('Allows to write messages to all users which belong to a specific role.'),
    ),
    'view roles recipients' => array(
      'title' => t('View roles recipients'),
      'description' => t('Ability to view roles recipients and the name of these roles.'),
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function privatemsg_roles_config_info() {
  $prefixes['privatemsg_roles.settings'] = array(
    'label' => t('Private message roles settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

function privatemsg_roles_theme() {
  return array(
    'privatemsg_roles_format' => array(
      'variables' => array('recipient' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_privatemsg_recipient_type_info().
 */
function privatemsg_roles_privatemsg_recipient_type_info() {
  return array(
    'role' => array(
      'name' => t('Role'),
      'description' => t('Enter the name of a role to write a message to all users which have that role. Example: authenticated user.'),
      'load' => 'privatemsg_roles_load_multiple',
      'format' => 'privatemsg_roles_format',
      'autocomplete' => 'privatemsg_roles_autocomplete',
      'generate recipients' => 'privatemsg_roles_load_recipients',
      'count' => 'privatemsg_roles_count_recipients',
      'write access' => 'write privatemsg to roles',
      'view access' => 'view roles recipients',
    ),
  );
}

/**
 * Load a number of roles based on their role_id.
 *
 * @param array $rids
 *   Array of role ids.
 * @return array
 *   Array of role objects.
 */
function privatemsg_roles_load_multiple($rids) {
  $config = config('privatemsg_roles.settings');
  $role_ids = $config->get('role_id');
  $roles = array();
  foreach ($rids as $rid) {
    if ($role_name = array_search($rid, $role_ids)) {
      $role = user_role_load($role_name);
      $role->type = 'role';
      $role->recipient = $rid;
    }
    $roles[privatemsg_recipient_key($role)] = $role;
  }

  return $roles;
}

/**
 * Format a role to be displayed as a recipient.
 */
function theme_privatemsg_roles_format($variables) {
  $role = $variables['recipient'];
  $options = $variables['options'];
  if (!empty($options['plain'])) {
    $name = $role->name;
    if (!empty($options['unique'])) {
      $name .= ' [role]';
    }
    return $name;
  }
  return t('%role (role)', array('%role' => $role->name));
}

/**
 * Loads users with a specific role.
 *
 * @param object $recipient
 * @param int $limit
 * @param int $offset
 *
 * @return array
 *   Array of recipient users.
 */
function privatemsg_roles_load_recipients($recipient, $limit, $offset) {
  $role = $recipient->name;
  if ($role == BACKDROP_AUTHENTICATED_ROLE) {
    $result = db_query_range('SELECT uid FROM {users} WHERE uid > 0 ORDER BY uid ASC', $offset, $limit);
  }
  else {
    $result = db_query_range('SELECT uid FROM {users_roles} WHERE role = :role ORDER BY uid ASC', $offset, $limit, array(':role' => $role));
  }

  return $result->fetchCol();
}

/**
 * Return the number of users which have a given role.
 *
 * @param object $recipient
 *
 * @return int
 */
function privatemsg_roles_count_recipients($recipient) {
  $role = $recipient->name;
  if ($role == BACKDROP_AUTHENTICATED_ROLE) {
    return db_query('SELECT COUNT(uid) FROM {users}')->fetchField();
  }
  else {
    return db_query('SELECT COUNT(uid) FROM {users_roles} WHERE role = :role', array(':role' => $role))->fetchField();
  }
}

/**
 * Provides autocomplete suggestions for roles.
 */
function privatemsg_roles_autocomplete($fragment, $names, $limit, $type) {
  $result = _privatemsg_assemble_query(array('autocomplete_roles', 'privatemsg_roles'), $fragment, $names)
    ->range(0, $limit)
    ->execute();
  $roles = array();
  foreach ($result as $role) {
    $role->type = 'role';
    $role->recipient = _privatemsg_roles_get_role_id($role->name);
    $role->role = $role->name;
    $roles[privatemsg_recipient_key($role)] = $role;
  }
  return $roles;
}

/**
 * Implements hook_privatemsg_name_lookup().
 */
function privatemsg_roles_privatemsg_name_lookup($string) {
  // Remove optional role specifier.
  $string = str_replace(t('[role]'), '', $string);
  $name = trim($string);
  $roles = user_roles(TRUE);
  if (isset($roles[$name])) {
    $role = user_role_load($name);
    $role->type = 'role';
    $role->recipient = _privatemsg_roles_get_role_id($name);

    return array(privatemsg_recipient_key($role) => $role);
  }
}

/**
 * Query definition to search for username autocomplete suggestions.
 *
 * @param string $search
 *   Which search string is currently searched for.
 * @param array $names
 *   Array of names not to be used as suggestions.
 *
 * @return \SelectQuery
 */
function privatemsg_roles_sql_autocomplete_roles($search, $names) {
  $query = db_select('users_roles', 'r');
  $query->addField('r', 'role', 'name');
  $query->addField('r', 'role', 'rid');
  $query->condition('r.role', $search . '%', 'LIKE');
  $query->orderBy('r.role', 'ASC');
  if (!empty($names)) {
    $query->condition('r.role', $names, 'NOT IN');
  }
  $query->distinct();
  return $query;
}

/**
 * Get an role_id for a given role.
 *   Checks the role to role_id mapping, with an option to generate a mapping
 *   for a role.
 *
 * @param string $role
 *   The role that we need a role_id value for, defaults to anonymous.
 * @param bool $create
 *   Whether or not to create a role_id if one does not exist. Default false.
 *
 * @return int|null
 *   An integer pulled from config (and/or saved to config if needed), or NULL
 *   if no role_id found or created.
 *
 */
function _privatemsg_roles_get_role_id($role = BACKDROP_AUTHENTICATED_ROLE, $create = FALSE) {
  if ($role == BACKDROP_AUTHENTICATED_ROLE) {
    return 1;
  }
  $config = config('privatemsg_roles.settings');
  $role_id = $config->get('role_id.' . $role);
  if (is_numeric($role_id)) {
    return $role_id;
  }
  if (empty($role_id) && $create) {
    $rids = $config->get('role_id');
    $max = 2;
    if (is_array($rids)) {
      $max = max($rids) + 1;
    }
    $config->set('role_id.' . $role, $max);
    $config->save();
    return $max;
  }
  return NULL;
}

/**
 * Implements hook_user_role_insert().
 */
function privatemsg_roles_user_role_insert($role) {
  // Generate a role_id for the new role and save it to the mapping.
  _privatemsg_roles_get_role_id($role->name, TRUE);
}

/**
 * Implements hook_user_role_delete().
 */
function privatemsg_roles_user_role_delete($role) {
  config_clear('privatemsg_roles.settings', 'role_id.' . $role->name);
}
