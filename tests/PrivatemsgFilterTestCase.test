<?php

require_once backdrop_get_path('module', 'privatemsg') . '/tests/PrivatemsgBaseTestCase.test';

/**
* Test filters, tags and inbox/sent handling.
*/
class PrivatemsgFilterTestCase extends PrivatemsgBaseTestCase {

  /**
  * Implements setUp().
  */
  function setUp() {
  parent::setUp('privatemsg', 'privatemsg_filter');
  }

  /**
  * Test correct handling of read all permissions.
  */
  function testInboxSentHandling() {
  $author    = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg', 'delete privatemsg'));
  $recipient = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg'));

  // Create new message.
  $edit = array(
  'recipient'   => $recipient->name,
  'subject'     => $this->randomName(20),
  'body[value]' => $this->randomName(100),
  );
  $this->backdropLogin($author);
  $this->backdropPost('messages/new', $edit, t('Send message'));
  $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient->name)), t('Message sent confirmation displayed'));

  // Validate that the message is not displayed in the inbox of the author
  // but in the sent list.
  $this->backdropGet('messages');
  $this->assertNoText($edit['subject'], t('Thread not displayed in inbox for author.'));
  $this->backdropGet('messages/sent');
  $this->assertText($edit['subject'], t('Thread displayed in "Sent messages" for author.'));
  $this->backdropGet('messages/list');
  $this->assertText($edit['subject'], t('Thread displayed in "All messages" for author.'));

  // Write a reply as recipient.
  $this->backdropLogin($recipient);
  $this->backdropGet('messages');
  $this->assertText($edit['subject'], t('Thread displayed in inbox for recipient.'));
  $this->backdropGet('messages/sent');
  $this->assertNoText($edit['subject'], t('Thread not displayed in "Sent messages" for recipient.'));
  $this->backdropGet('messages/list');
  $this->assertText($edit['subject'], t('Thread displayed in "All messages." for recipient.'));

  // Navigate to the new message.
  $this->clickLink($edit['subject']);
  $response = array(
  'body[value]' => $this->randomName(100),
  );
  $this->backdropPost(NULL, $response, t('Send message'));
  $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $author->name)), t('Message sent confirmation displayed'));

  $this->backdropGet('messages/sent');
  $this->assertText($edit['subject'], t('Thread displayed in "Sent messages" for recipient.'));

  $this->backdropLogin($author);
  $this->backdropGet('messages');
  $this->assertText($edit['subject'], t('Thread displayed in inbox for author.'));

  // Test for bug http://drupal.org/node/617648
  // Delete all messages for author.
  $delete = array(
  'list[1]' => 1,
  );
  $this->backdropPost(NULL, $delete, t('Delete'));
  $this->assertNoText($edit['subject'], t('Thread has been deleted for author.'));

  // Write a reply as recipient.
  $this->backdropLogin($recipient);
  $this->backdropGet('messages');

  // Navigate to the new message.
  $this->clickLink($edit['subject']);
  $response = array(
  'body[value]' => $this->randomName(100),
  );
  $this->backdropPost(NULL, $response, t('Send message'));
  $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $author->name)), t('Message sent confirmation displayed'));

  // Check if thread is visible again for author.
  $this->backdropLogin($author);
  $this->backdropGet('messages');
  $this->assertText($edit['subject'], t('Thread displayed again in inbox for author.'));

  // Test archiving of messages.
  // Delete all messages for author.
  $archive = array(
  'list[1]' => 1,
  'operation' => 'archive',
  );
  $this->backdropPost(NULL, $archive, t('Execute'));
  $this->assertText(t('The messages have been archived.'), t('Confirmation message displayed'));
  $this->assertNoText($edit['subject'], t('Thread has been removed from inbox.'));

  $this->backdropGet('messages/list');
  $this->assertText($edit['subject'], t('Thread still displayed in "All messages" list.'));

  }
}
