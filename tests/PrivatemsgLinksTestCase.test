<?php

require_once backdrop_get_path('module', 'privatemsg') . '/tests/PrivatemsgBaseTestCase.test';

/**
 * Tests for fields integration.
 */
class PrivatemsgLinksTestCase extends PrivatemsgBaseTestCase {

  /**
   * Use testing profile.
   */
  protected $profile = 'standard';

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp('privatemsg');
  }

  /**
   * Tests author links displayed on nodes and comments.
   */
  function testAuthorLinks() {
    $admin = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg', 'administer privatemsg settings', 'create post content', 'create page content'));
    $user = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));

    $this->backdropLogin($admin);

    $settings = array(
      'display_link_self' => FALSE,
      'link_node_types[post]' => TRUE,
      'display_on_teaser' => FALSE,
      'display_on_comments' => TRUE,
    );
    $this->backdropPost('admin/config/messaging/privatemsg', $settings, t('Save configuration'));

    $node1 = array(
      'title' => $this->randomName(10),
      'body[und][0][value]' => $this->randomString(50),
    );
    $this->backdropPost('node/add/post', $node1, t('Save'));

    $comment = array(
      'comment_body[und][0][value]' => $this->randomName(20),
    );
    $this->backdropPost(NULL, $comment, t('Save'));

    $node2 = array(
      'title' => $this->randomName(),
      'body[und][0][value]' => $this->randomString(50),
    );
    $this->backdropPost('node/add/page', $node2, t('Save'));

    $this->backdropGet('node');
    $this->assertNoText(t('Send author a message'), t('Send author a message link not displayed.'));
    $this->clickLink($node1['title']);
    $this->assertNoText(t('Send author a message'), t('Send author a message link not displayed.'));

    $this->backdropLogin($user);
    $this->backdropGet('node');
    $this->assertNoText(t('Send author a message'), t('Send author a message link not displayed.'));
    $this->clickLink($node1['title']);
    $this->assertNoUniqueText(t('Send author a message'), t('Send author a message link displayed.'));

    $this->clickLink(t('Send author a message'));
    // To field and subject should be correctly pre-filled now.
    $this->backdropPost(NULL, array(), t('Send message'));

    // Make sure the message was sent to the correct user.
    $this->assertText(t('A message has been sent to @user', array('@user' => $admin->name)));

    // @todo: Do not guess nid.
    $this->backdropGet('node/2');
    $this->assertNoText(t('Send author a message'), t('Send author a message link not displayed.'));

    $this->backdropLogin($admin);
    $this->backdropGet('messages');
    $this->assertText(t('Message regarding @node', array('@node' => $node1['title'])));
  }

  /**
   * Tests menu block.
   */
  function testMenuBlock() {
    $admin = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg', 'administer privatemsg settings', 'administer blocks', 'administer menu', 'administer layouts'));
    $user = $this->backdropCreateUser(array('read privatemsg'));

    // Enable block on default layout.
    $this->backdropLogin($admin);
    $edit = array();
    $this->backdropGet('admin/structure/layouts/manage/default');
    $this->clickLink(t('Add block'), 3);
    $this->assertText(t('Privatemsg links'));
    $this->clickLink(t('Privatemsg links'));
    $this->backdropPost(NULL, $edit, t('Add block'));

    // Save the layout.
    $this->backdropPost(NULL, array(), t('Save layout'));

    // Disable secondary menu.
    /* @todo: Not yet possible because simpletest needs a log out link to verify that the user is logged in.
    $menu_settings = array(
    'menu_secondary_links_source' => '',
    );
    $this->backdropPost('admin/structure/menu/settings', $menu_settings, t('Save configuration'));
     *
     */

    $this->backdropGet('node/1');
    $this->assertText(t('Private messages'), t('Privatemsg menu block title displayed.'));
    $this->assertText('Write new message', t('Write new message link displayed.'));

    $message = array(
      'recipient' => $user->name,
      'subject' => $this->randomName(),
      'body[value]' => $this->randomName(50),
    );
    $this->backdropPost('messages/new', $message, t('Send message'));

    $this->backdropLogin($user);
    $this->assertNoText(t('Write new message'), t('Write new message link not displayed.'));
    $this->assertNoUniqueText(t('Messages (1 new)'), t('Messages link including new message information displayed'));
  }

  /**
   * Tests menu block.
   */
  function testNewBlock() {
    $admin = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg', 'administer privatemsg settings', 'administer blocks', 'administer menu', 'administer layouts'));
    $user = $this->backdropCreateUser(array('read privatemsg'));

    // Enable block.
    $this->backdropLogin($admin);

    // Enable block on default layout.
    $this->backdropLogin($admin);
    $edit = array();
    $this->backdropGet('admin/structure/layouts/manage/default');
    $this->clickLink(t('Add block'), 3);
    $this->assertText(t('New message indication'));
    $this->clickLink(t('New message indication'));
    $this->backdropPost(NULL, $edit, t('Add block'));

    // Save the layout.
    $this->backdropPost(NULL, array(), t('Save layout'));

    $this->backdropGet('node/1');
    $this->assertNoText(t('New message'), t('Privatemsg new block title not displayed.'));

    $message = array(
      'recipient' => $user->name,
      'subject' => $this->randomName(),
      'body[value]' => $this->randomName(50),
    );
    $this->backdropPost('messages/new', $message, t('Send message'));

    $this->backdropLogin($user);
    $this->assertText(t('Unread message'), t('Privatemsg new block title displayed.'));

    $this->assertText(t('You have an unread message! Click here to read it.'), t('New message indication displayed.'));
  }
}
