<?php

require_once backdrop_get_path('module', 'privatemsg') . '/tests/PrivatemsgBaseTestCase.test';

class PrivatemsgTestCase extends PrivatemsgBaseTestCase {

  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp('privatemsg');


    // Create the full html format.
    $full_html_format = array(
      'format' => 'full_html',
      'name' => 'Full HTML',
      'weight' => 1,
      'filters' => array(
        // URL filter.
        'filter_url' => array(
          'weight' => 0,
          'status' => 1,
        ),
        // Line break filter.
        'filter_autop' => array(
          'weight' => 1,
          'status' => 1,
        ),
        // HTML corrector filter.
        'filter_htmlcorrector' => array(
          'weight' => 10,
          'status' => 1,
        ),
      ),
    );
    $full_html_format = (object) $full_html_format;
    filter_format_save($full_html_format);
    // Refresh permissions.
    $this->checkPermissions(array(), TRUE);
  }

  /**
   * Test user access to /messages
   * Create user with no 'read privatemsg' permission. Try to access mailbox and see if it gives access denied error
   * Create user with 'read privatemsg' permission. Try to access mailbox and see if it gives allows access
   */
  function testPrivatemsgReadPrivatemsgPermission() {
    $user_no_read_msg = $this->backdropCreateUser(); // set up user with default permissions (meaning: no read privatemsg permission
    $author     = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg'));
    $recipient  = $this->backdropCreateUser(array('read privatemsg'));
    $no_recipient  = $this->backdropCreateUser(array('read privatemsg'));


    $subject = $this->randomName(20);
    $body = $this->randomName(50);

    $response = privatemsg_new_thread(array($recipient), $subject, $body, array('author' => $author));

    $this->backdropLogin($user_no_read_msg);
    $this->backdropGet('messages');
    $this->assertResponse(403, t('HTTP Response 403: Access to mailbox was blocked to user without "<em>read privatemsg</em>" permission'));

    $this->backdropLogin($no_recipient);
    $this->backdropGet('messages');
    $this->assertResponse(200, t('HTTP Response 200: Access to mailbox was authorized to user with "<em>read privatemsg</em>" permission'));

    $this->backdropGet('messages/view/' . $response['message']->thread_id);
    $this->assertResponse(403, t('HTTP Response 403: Access to thread is blocked for non-recipients.'));

    $this->backdropLogin($recipient);
    $this->backdropGet('messages/view/' . $response['message']->thread_id);
    $this->assertText($subject, t('Access to thread for recipient allowed.'));

    $this->backdropGet('messages/view/' . ($response['message']->thread_id + 1));
    $this->assertResponse(404, t('Non-existing thread lead to HTTP Response 404.'));

  }
  /**
   * Test user access to /messages/new
   * Create user with no 'write privatemsg' permission. Try to access Write New Message page and see if it gives access denied error
   * Create user with 'write privatemsg' permission. Try to access Write New Message page and see if it gives allows access
   */
  function testPrivatemsgWritePrivatemsgPermission() {
    $user_no_write_msg = $this->backdropCreateUser(); // set up user with default permissions (meaning: no read privatemsg permission
    $this->backdropLogin($user_no_write_msg);
    $this->backdropGet('messages/new');
    $this->assertResponse(403, t('HTTP Response 403: Access to Write New Message page was blocked to user without "<em>write privatemsg</em>" permission'));

    $user_write_msg = $this->backdropCreateUser(array('write privatemsg')); // set up user with write privatemsg permissions
    $this->backdropLogin($user_write_msg);
    $this->backdropGet('messages/new');
    $this->assertResponse(200, t('HTTP Response 200: Access to Write New Message page was authorized to user with "<em>write privatemsg</em>" permission'));
  }

  function testPaging() {
    $author     = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg'));
    $recipient  = $this->backdropCreateUser(array('read privatemsg'));

    // Set lower values so that we don't need to generate 100's of messages.
    config_set('privatemsg.settings', 'view_default_amount', 5);
    config_set('privatemsg.settings', 'view_max_amount', 10);

    $subject_single = $this->randomName(20);
    $subject = $this->randomName(20);
    $bodies = array();
    for ($i = 0; $i < 24; $i++) {
      $bodies[$i] = $this->randomName(100);
    }
    privatemsg_new_thread(array($recipient), $subject_single, $bodies[23], array('author' => $author));
    $thread = privatemsg_new_thread(array($recipient), $subject, $bodies[0], array('author' => $author));
    for ($i = 1; $i < 23; $i++) {
      privatemsg_reply($thread['message']->thread_id, $bodies[$i], array('author' => $author));
    }

    $this->backdropLogin($recipient);
    $this->backdropGet('messages');
    $this->clickLink($subject_single);

    $this->assertNoText(t('Displaying messages 1 - 1 of 1'), t('Pager is displayed'));
    $this->assertNoText(t('&gt;&gt;'), t('Newer messages link not displayed.'));
    $this->assertNoText(t('&lt;&lt;'), t('Older messages link not displayed.'));

    $this->backdropGet('messages');
    $this->clickLink($subject);

    // Verify that only the last 10 messages are displayed.
    $this->assertText(t('&lt;&lt; Displaying messages 14 - 23 of 23'), t('Pager is displayed'));
    $this->assertNoText($bodies[0], t('First message is not displayed.'));
    $this->assertNoText($bodies[12], t('Hidden message is not displayed.'));
    $this->assertText($bodies[13], t('Message is displayed.'));
    $this->assertText($bodies[22], t('Message is displayed.'));
    $this->assertNoText(t('&gt;&gt;'), t('Newer messages link not displayed.'));

    config_set('privatemsg.settings', 'view_use_max_as_default', TRUE);
    $this->backdropGet('messages');
    $this->clickLink($subject);

    // Now with separate default value.
    // Verify that only the last 5 messages are displayed.
    $this->assertText(t('&lt;&lt; Displaying messages 19 - 23 of 23'), t('Pager is displayed'));
    $this->assertNoText($bodies[0], t('First message is not displayed.'));
    $this->assertNoText($bodies[17], t('Hidden message is not displayed.'));
    $this->assertText($bodies[18], t('Message is displayed.'));
    $this->assertText($bodies[22], t('Message is displayed.'));
    $this->assertNoText(t('>>'), t('Newer messages link not displayed.'));

    // Load older messages and verify again.
    $this->clickLink(t('<<'));
    $this->assertText(t('&lt;&lt; Displaying messages 9 - 18 of 23 &gt;&gt;'), t('Pager is displayed'));
    $this->assertNoText($bodies[0], t('First message is not displayed.'));
    $this->assertNoText($bodies[7], t('Hidden message is not displayed.'));
    $this->assertText($bodies[8], t('Message is displayed.'));
    $this->assertText($bodies[17], t('Message is displayed.'));
    $this->assertNoText($bodies[22], t('Hidden message is not displayed.'));

    // Load older messages and verify again.
    $this->clickLink(t('<<'));
    $this->assertText(t('Displaying messages 1 - 8 of 23 &gt;&gt;'), t('Pager is displayed'));
    $this->assertText($bodies[0], t('Message is displayed.'));
    $this->assertText($bodies[7], t('Message is displayed.'));
    $this->assertNoText($bodies[9], t('Hidden message is not displayed.'));
    $this->assertNoText(t('&lt;&lt;'), t('Older messages link not displayed.'));

    // Going back should follow the same order.
    $this->clickLink(t('>>'));
    $this->assertText(t('&lt;&lt; Displaying messages 9 - 18 of 23 &gt;&gt;'), t('Pager is displayed'));
    $this->assertNoText($bodies[0], t('First message is not displayed.'));
    $this->assertNoText($bodies[7], t('Hidden message is not displayed.'));
    $this->assertText($bodies[8], t('Message is displayed.'));
    $this->assertText($bodies[17], t('Message is displayed.'));
    $this->assertNoText($bodies[22], t('Hidden message is not displayed.'));

    config_set('privatemsg.settings', 'view_max_amount', PRIVATEMSG_UNLIMITED);
    $this->backdropGet('messages');
    $this->clickLink($subject);

    // Now with separate default value.
    // Verify that only the last 5 messages are displayed.
    $this->assertText(t('&lt;&lt; Displaying messages 19 - 23 of 23'), t('Pager is displayed'));
    $this->assertNoText($bodies[0], t('First message is not displayed.'));
    $this->assertNoText($bodies[17], t('Hidden message is not displayed.'));
    $this->assertText($bodies[18], t('Message is displayed.'));
    $this->assertText($bodies[22], t('Message is displayed.'));
    $this->assertNoText(t('&gt;&gt;'), t('Newer messages link not displayed.'));

    // Load older messages and verify again.
    $this->clickLink(t('<<'));
    $this->assertNoText(t('Displaying messages 1 - 23 of 23'), t('Pager is displayed'));
    $this->assertText($bodies[0], t('Message is displayed.'));
    $this->assertText($bodies[22], t('Message is displayed.'));
    $this->assertNoText(t('&gt;&gt;'), t('Newer messages link not displayed.'));
    $this->assertNoText(t('&lt;&lt;'), t('Older messages link not displayed.'));

    // Check with max_amount = UNLIMITED and different default amount disabled.
    config_set('privatemsg.settings', 'view_use_max_as_default', FALSE);

    $this->backdropGet('messages');
    $this->clickLink($subject);
    $this->assertNoText(t('Displaying messages 1 - 23 of 23'), t('Pager is displayed'));
    $this->assertText($bodies[0], t('Message is displayed.'));
    $this->assertText($bodies[22], t('Message is displayed.'));
    $this->assertNoText(t('&gt;&gt;'), t('Newer messages link not displayed.'));
    $this->assertNoText(t('&lt;&lt;'), t('Older messages link not displayed.'));
  }

  /**
   * Test sending message from the /messages/new page between two people
   */
  function testWriteReplyPrivatemsg() {
    // Create an author and two recipients.
    $author     = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg', 'select text format for privatemsg', filter_permission_name(filter_format_load('full_html'))));
    $recipient  = $this->backdropCreateUser(array('read privatemsg'));
    $recipient2  = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));
    // Set up a user with "read/write privatemsg" permissions.
    $blocked_recipient = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));
    // Block this recipient to test users who cancelled their accounts.
    $blocked_recipient->status = 0;
    user_save($blocked_recipient);

    // Login author and go to new message form.
    $this->backdropLogin($author);
    $this->backdropGet('messages/new');

    // Prepare edit arrays, single recipient with [user].
    $edit = array(
      'recipient'   => $recipient->name . ' [user]',
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100),
    );
    // Two recipients.
    $edit2 = array(
      'recipient'   => $recipient->name . ', ' . $recipient2->name,
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100),
    );
    // No recipients.
    $editnone = array(
      'recipient'   => '',
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100),
    );
    // Invalid recipient.
    $editinvalid = array(
      'recipient'   => $this->randomName(5),
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100),
    );
    // Blocked recipient.
    $editrecipientblocked = array(
      'recipient'   => $blocked_recipient->name,
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100),
    );
    // Message for which the author will be blocked later.
    $editauthorblocked = array(
      'recipient'   => $recipient2->name,
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100),
    );
    // Empty body.
    $editnobody = array(
      'recipient'   => $recipient->name,
      'subject'     => $this->randomName(20),
      'body[value]' => '',
    );
    // Empty subject.
    $editnosubject = array(
      'recipient'   => $recipient->name,
      'subject'     => '',
      'body[value]' => $this->randomName(100),
    );
    // Empty subject and body.
    $editempty = array(
      'recipient'   => $recipient->name,
      'subject'     => '',
      'body[value]' => '',
    );
    // Empty subject and body.
    $editonlyspace = array(
      'recipient'   => $recipient2->name,
      'subject'     => ' ',
      'body[value]' => $this->randomName(10),
    );
    // Invalid and valid recipient
    $editmixed = array(
      'recipient'   => ($invalidmixed = $this->randomName(5)) . ', ' . $recipient->name,
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100),
    );

    // message with a bold part, not allowed with default format
    $editformatted = array(
      'recipient'   => $recipient2->name,
      'subject'     => $this->randomName(20),
      'body[value]' => $this->randomName(100) . '<b>formatted message #1</b>',
      'body[format]' => 'full_html',
    );

    // Submit the messages.
    $this->backdropPost('messages/new', $edit, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient->name)), 'Message sent confirmation displayed.');

    $this->backdropPost('messages/new', $edit2, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => implode(', ', array($recipient->name, $recipient2->name)))), 'Message sent confirmation displayed.');

    $this->backdropPost('messages/new', $editnone, t('Send message'));
    $this->assertText(t('To field is required.'), 'Message was not sent.');

    $this->backdropPost('messages/new', $editinvalid, t('Send message'));
    $this->assertText(t('You must include at least one valid recipient.'), 'Message was not sent.');
    $this->assertText(t('The following recipients will not receive this private message: @recipients', array('@recipients' => $editinvalid['recipient'])), 'Message about non-existing user displayed.');

    $this->backdropPost('messages/new', $editrecipientblocked, t('Send message'));
    $this->assertText(t('@recipients has disabled his or her account.', array('@recipients' => $blocked_recipient->name)), 'Message about blocked user displayed.');
    $this->assertText(t('You are not allowed to send this message because all recipients are blocked.'), 'Message was not sent.');

    // We will block the author later to test whether the reply form appears.
    $this->backdropPost('messages/new', $editauthorblocked, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient2->name)), 'Message sent confirmation displayed.');

    $this->backdropPost('messages/new', $editnobody, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient->name)), 'Message sent confirmation displayed.');

    $this->backdropPost('messages/new', $editnosubject, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient->name)), 'Message sent confirmation displayed.');

    $this->backdropPost('messages/new', $editempty, t('Send message'));
    $this->assertText(t('You must include a subject line with your message.'), 'Empty subject message displayed.');

    $this->backdropPost('messages/new', $editonlyspace, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient2->name)), 'Message sent confirmation displayed.');

    $this->backdropPost('messages/new', $editmixed, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient->name)), 'Message sent confirmation displayed.');
    $this->assertText(t('The following recipients will not receive this private message: @recipients', array('@recipients' => $invalidmixed)), 'Message about non-existing user displayed.');

    $this->backdropPost('messages/new', $editformatted, t('Send message'));
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient2->name)), 'Message sent confirmation displayed.');

    // Login as recipient2 and try to write some replies.
    $this->backdropLogin($recipient2);
    $this->backdropGet('messages');

    // Check that the message with only a space in the subject uses the body
    // as subject.
    $this->clickLink($editonlyspace['body[value]']);
    $this->backdropGet('messages');

    $this->assertNoText($edit['subject'], 'Message sent to other recipient not found.');
    $this->assertText($edit2['subject'], 'Sent message subject found.');
    $this->clickLink($edit2['subject']);

    $this->assertText($edit2['body[value]'], 'Found message body.');

    // Prepare replies.
    $reply = array(
      'body[value]' => $this->randomName(100),
    );
    // Empty body.
    $replyempty = array(
      'body[value]' => '',
    );

    $this->backdropPost(NULL, $reply, t('Send message'));
    $this->assertText($reply['body[value]'], 'New message body displayed.');

    $this->backdropPost(NULL, $replyempty, t('Send message'));
    $this->assertText(t('You must include a message in your reply.'));

    // reply with a bold part, not allowed with default format
    $replyformatted = array(
      'body[value]' => $this->randomName(100) . '<b>formatted message #2</b>',
    );
    $this->backdropGet('messages');
    $this->clickLink($editformatted['subject']);
    $this->assertRaw($editformatted['body[value]'], 'Found formatted message body.');

    $this->backdropPost(NULL, $replyformatted, t('Send message'));
    $this->assertNoRaw($replyformatted['body[value]'], 'Did not find formatted reply body.');
    $this->assertText(check_plain($replyformatted['body[value]']), 'New reply body displayed.');

    // Login using recipient and try to read the message by going to inbox first.
    $this->backdropLogin($recipient);
    $this->backdropGet('messages');

    // Assert if we see the subject of the messages.
    $this->assertText($edit['subject'], 'Sent message subject found.');
    $this->assertText($edit2['subject'], 'Sent message subject found.');
    $this->assertText($editnobody['subject'], 'Sent message subject found.');
    $this->assertText(trim(truncate_utf8(strip_tags($editnosubject['body[value]']), 50, TRUE, TRUE)), 'Sent message subject found.');
    $this->assertText($editmixed['subject'], 'Sent message subject found.');

    // Assert that we don't see those that were invalid.
    $this->assertNoText($editnone['subject'], 'Invalid message subject not found.');
    $this->assertNoText($editinvalid['subject'], 'Invalid message subject not found.');

    // Navigate into the message.
    $this->clickLink($edit['subject']);
    // Confirm that we can read the message that was sent.
    $this->assertText($edit['body[value]'], 'Found message body.');
    $this->assertNoText(t('Reply to thread:'), 'Reply form is not displayed.');

    // Verify that the participants information is correct.
    $this->assertText(t('Between you and @author', array('@author' => $author->name)));

    // Navigate into the message.
    $this->backdropGet('messages');
    $this->clickLink($edit2['subject']);
    // Confirm that we can read the message that was sent.
    $this->assertText($edit2['body[value]'], 'Found message body.');
    // Confirm that we can read the reply that was sent.
    $this->assertText($reply['body[value]'], 'Found reply body.');

    // Block the author.
    $author->status = 0;
    user_save($author);
    $this->backdropLogin($recipient2);
    // Navigate into the message.
    $this->backdropGet('messages');
    $this->clickLink($editauthorblocked['subject']);
    // Confirm that the reply form is not shown.
    $this->assertNoText(t('Reply'), 'Reply form is not displayed.');
    $this->assertText(t('You can not reply to this conversation because all recipients are blocked.'));
  }

  /**
   * Test functionality around disabling private messaging.
   */
  function testDisablePrivatemsg() {
    $admin_user = $this->backdropCreateUser(array('administer permissions'));
    $enableduser = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg')); // set up user with read/write privatemsg permissions
    $enableduser2 = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg')); // set up user with read/write privatemsg permissions
    $disableduser = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg', 'allow disabling privatemsg')); // set up user with read/write privatemsg permissions

    // Create a message between the users that we can use to test
    $return = privatemsg_new_thread(array($disableduser), $this->randomName(20), $this->randomName(100), array('author' => $enableduser));
    $mid = $return['message']->thread_id;

    $this->backdropLogin($disableduser);
    // Now disable $disabledUser.
    $this->backdropGet('user/' . $disableduser->uid . '/edit');
    $edit['pm_enable'] = FALSE;
    $this->backdropPost('user/' . $disableduser->uid . '/edit', $edit, t('Save'));

    // Verify that disableduser can list messages.
    $this->backdropGet('messages');
    $this->assertResponse(200, t('HTTP Response 200: Access to reading messages page is allowed.'));

    // Verify that $disableduser can read messages but there is not reply form
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->assertResponse(200, t('HTTP Response 200: Access to message thread page is allowed.'));
    $this->assertNoText(t('Reply to thread'), 'No reply form shown.');

    // Verify that $disableduser cannot send a new message.
    $this->backdropGet('messages/new');
    $this->assertResponse(403, t('HTTP Response 403: Access to Write New Message page was blocked to user with private messaging disabled'));

    // Use a newly loaded user object to test the API calls.
    $disableduser_loaded = user_load($disableduser->uid, TRUE);

    // Check that $disableduser cannot submit a reply
    $result = privatemsg_reply($return['message']->thread_id, $this->randomName(100), array('author' => $disableduser_loaded));

    $this->assertFalse($result['success'], 'Message reply was not sent.');

    // Log in as $enableduser and try to send to $disabled user.
    // Make sure that a message to multiple recipients still works if one is
    // disabled.
    $message = array(
      'recipient'   => $disableduser->name,
      'subject'     => $this->randomName(20),
      'body[value]'        => $this->randomName(100),
    );
    $this->backdropLogin($enableduser);
    $this->backdropPost('messages/new', $message, t('Send message'));
    $this->assertText(t('You are not allowed to send this message because all recipients are blocked.'));

    // Make sure that a message to multiple recipients still works if one is
    // disabled.
    $messagemultiple = array(
      'recipient'   => $enableduser2->name . ', ' . $disableduser->name,
      'subject'     => $this->randomName(20),
      'body[value]'        => $this->randomName(100),
    );
    $this->backdropPost('messages/new', $messagemultiple, t('Send message'));
    $this->assertText(t('@recipient has disabled private message receiving.', array('@recipient' => $disableduser->name)), 'Message about user with disabled private messaging.');
    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $enableduser2->name)), 'Message sent confirmation displayed.');

    // Remove the permission to disable privatemsg.
    $this->backdropLogin($admin_user);
    $role_name = array_keys(user_roles())[5];
    user_role_revoke_permissions($role_name, array('allow disabling privatemsg'));

    // Make sure that the option is not visible anymore.
    $this->backdropLogin($disableduser);
    $this->backdropGet('user/' . $disableduser->uid . '/edit');
    $this->assertNoText(t('Enable Private Messaging'), t('Disable privatemsg setting not displayed'));

    // Verify that the user is now allowed to write messages again.
    $this->backdropGet('messages/new');
    $this->assertNoText(t('You are not authorized to access this page.'), t('Access denied page is not displayed.'));
    $this->assertText(t('Write new message'), t('Write message form is displayed.'));
  }

  /**
   * Test correct handling of read all permissions.
   */
  function testReadAllPermission() {
    $author    = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg'));
    $recipient = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg'));
    $admin     = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg', 'read all private messages'));

    // Create new message.
    $edit = array(
      'recipient'   => $recipient->name,
      'subject'     => $this->randomName(20),
      'body[value]'        => $this->randomName(100),
    );
    $this->backdropLogin($author);
    $this->backdropPost('messages/new', $edit, t('Send message'));

    $this->assertText(t('A message has been sent to @recipients.', array('@recipients' => $recipient->name)), t('Message sent confirmation displayed'));

    $this->backdropLogin($admin);
    $this->backdropGet('messages/view/1');

    $this->assertText(t('This conversation is being viewed with escalated privileges and may not be the same as shown to normal users.'), t('Notice about read all mode displayed.'));

    // Send a first response.
    $admin_edit = array(
      'body[value]'        => $this->randomName(100),
    );
    $this->backdropPost('messages/view/1', $admin_edit, t('Send message'));

    // Make sure that the notice is not displayed anymore.
    // @tod: Commented out because this does not work as expected.
    $this->assertNoText(t('This conversation is being viewed with escalated privileges and may not be the same as shown to normal users.'), t('Notice about read all mode not displayed.'));

    // Make sure that both the existing message body and the new one are displayed.
    $this->assertText($edit['body[value]'], t('First message body displayed.'));
    $this->assertText($admin_edit['body[value]'], t('New message body displayed.'));

    $admin_recipient_count = db_query("SELECT COUNT(*) FROM {pm_index} WHERE recipient = :recipient AND thread_id = :thread_id", array(
      ':recipient' => $admin->uid,
      ':thread_id' => 1,
    ))->fetchField();
    $this->assertEqual($admin_recipient_count, 2, t('Admin is listed as recipient for every message once.'));


    // Send a second response.
    $admin_edit2 = array(
      'body[value]' => $this->randomName(100),
    );
    $this->backdropPost('messages/view/1', $admin_edit2, t('Send message'));

    // Make sure that both the existing message body and the new one are displayed.
    $this->assertText($edit['body[value]'], t('First message body displayed.'));
    $this->assertText($admin_edit['body[value]'], t('Second response body displayed.'));
    $this->assertText($admin_edit2['body[value]'], t('Third message body displayed.'));

    $admin_recipient_count = db_query("SELECT COUNT(*) FROM {pm_index} WHERE recipient = :recipient AND thread_id = :thread_id", array(
      ':recipient' => $admin->uid,
      ':thread_id' => 1,
    ))->fetchField();
    $this->assertEqual($admin_recipient_count, 3, t('Admin is listed as recipient for every message once.'));

  }

  /**
   * Tests for the flush feature
   */
  function testPrivatemsgFlush() {
    $author = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg'));
    $recipient = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg'));

    // Send 10 messages.
    for ($i = 0; $i < 10; $i++) {
      privatemsg_new_thread(array($recipient), 'Message #' . $i, 'This is the body', array('author' => $author));
    }

    // Delete message 1, 3, 4, 6, 9 for author.
    foreach (array(1, 3, 4, 6, 9) as $pmid) {
      privatemsg_message_change_delete($pmid, TRUE, $author);
    }

    // Delete message 1, 2, 4, 6, 8 for recipient.
    foreach (array(1, 3, 4, 6, 9) as $pmid) {
      privatemsg_message_change_delete($pmid, TRUE, $recipient);
    }

    // Now, mid 1, 4 and 6 have been deleted by both.

    // Flush configuration, enable, delay is default, 30 days
    config_set('privatemsg.settings', 'flush_enabled', TRUE);

    // Set back the deleted timestamp 35 days back of mid 4.
    db_update('pm_index')
      ->fields(array('deleted' => REQUEST_TIME - 35 * 86400))
      ->condition('mid', 4)
      ->execute();
    // Set back the deleted timestamp of mid 6, but only 20 days back.
    db_update('pm_index')
      ->fields(array('deleted' => REQUEST_TIME - 20 * 86400))
      ->condition('mid', 6)
      ->execute();

    // Run flush.
    privatemsg_cron();

    // Check if the undeleted messages are still there.
    foreach (array(2, 3, 5, 7, 8, 9, 10) as $pmid) {
      $message = privatemsg_message_load($pmid, $author);
      $this->assertTrue(!empty($message), t('Undeleted message #%id is still in the system', array('%id' => $pmid)));
    }

    // Check if the "recently" deleted  messages are still there.
    foreach (array(1, 6) as $pmid) {
      $message = privatemsg_message_load($pmid, $author);
      $this->assertTrue(!empty($message), t('Deleted message #%id is still in the system', array('%id' => $pmid)));
    }

    // Mid 4 should have been flushed.
    entity_get_controller('privatemsg_message')->resetCache();
    $message = privatemsg_message_load(4, $author);
    $this->assertTrue(empty($message), t('Message #4 has been flushed'));
  }

  function testDelete() {
    // Create users.
    $author = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg', 'delete privatemsg'));
    $recipient = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg', 'delete privatemsg'));
    $recipient2 = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg', 'cancel account'));
    $admin = $this->backdropCreateUser(array('write privatemsg', 'read privatemsg', 'delete privatemsg', 'read all private messages'));
    $dummy = $this->backdropCreateUser(array('cancel account'));

    // Create texts.
    $subject = $this->randomName(20);
    $body1 = $this->randomName(100);
    $body2 = $this->randomName(100);

    // Create message and response.
    $return = privatemsg_new_thread(array($recipient, $recipient2), $subject, $body1, array('author' => $author));
    privatemsg_reply($return['message']->thread_id, $body2, array('author' => $recipient));

    // Check with user without delete permission.
    $this->backdropLogin($recipient2);
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->assertText($subject, 'Subject is displayed');
    $this->assertText($body1, 'First message is displayed');
    $this->assertText($body2, 'Second message is displayed');
    $this->assertNoLink(t('Delete'), 'Delete message is link is not displayed for user without permission');

    // Check if access for that user is denied.
    $this->backdropGet('messages/delete/' . $return['message']->thread_id . '/' . $return['message']->mid);
    $this->assertText(t('Access denied'));

    // Check with user with delete access.
    $this->backdropLogin($recipient);
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->assertText(t('Delete'), 'Delete message is link is displayed for user without permission');

    // Click delete link of the second message and cancel.
    $this->clickLink(t('Delete'), 1);
    $this->assertText(t('Are you sure you want to delete this message?'), 'Confirmation message displayed');
    $this->clickLink(t('Cancel'));
    $this->assertText($body2, 'Second message is still displayed');

    // Confirm message deletion.
    $this->clickLink(t('Delete'), 1);
    $this->assertText(t('Are you sure you want to delete this message?'), 'Confirmation message displayed');
    $this->backdropPost(NULL, array(), t('Delete'));
    $this->assertText(t('Message has been deleted.'), 'Message has been deleted');
    $this->assertText($body1, 'First message is still displayed');
    $this->assertNoText($body2, 'Second message was deleted');

    // Click delete link of the first message and cancel.
    $this->clickLink(t('Delete'));
    $this->assertText(t('Are you sure you want to delete this message?'), 'Confirmation message displayed');
    $this->clickLink(t('Cancel'));
    $this->assertText($body1, 'First message is still displayed');

    // Confirm message deletion.
    $this->clickLink(t('Delete'));
    $this->assertText(t('Are you sure you want to delete this message?'), 'Confirmation message displayed');
    $this->backdropPost(NULL, array(), t('Delete'));
    $this->assertText(t('Message has been deleted.'), 'Message deleted has been deleted');
    $this->assertNoText($subject, 'All messages of that thread have been deleted');

    // Test if the message has not been deleted for other users.
    $this->backdropLogin($recipient2);
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->assertText($body1, 'First message is still displayed');
    $this->assertText($body2, 'First message is still displayed');

    // Test delete all checkbox.
    $this->backdropLogin($admin);
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->clickLink(t('Delete'), 1);
    $this->backdropPost(NULL, array('delete_options' => TRUE), t('Delete'));
    $this->assertText(t('Message has been deleted for all users.'), 'Message deleted has been deleted');

    // Test if the message has been deleted for all users.
    $this->backdropLogin($recipient2);
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->assertText($body1, 'First message is still displayed');
    $this->assertNoText($body2, 'Second message has been deleted for all users');

    // Check that messages of canceled users (user_cancel_delete) are deleted too.
    $edit = array('body[value]' => $this->randomName(100));
    $this->backdropPost(NULL, $edit, t('Send message'));
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->assertText($edit['body[value]'], t('New reply is displayed'));

    // Reload user object, don't use the cache.
    $recipient2 = user_load($recipient2->uid, TRUE);

    // Attempt to cancel account.
    config_set('system.core', 'user_cancel_method', 'user_cancel_delete');
    $this->backdropGet('user/' . $recipient2->uid . '/edit');
    $this->backdropPost(NULL, NULL, t('Cancel account'));
    $this->assertText(t('Are you sure you want to cancel your account?'), 'Confirmation form to cancel account displayed.');
    $this->assertText(t('Your account will be removed and all account information deleted. All of your content will also be deleted.'), 'Informs that all content will be deleted.');


    // Confirm account cancellation.
    // Explicitly use time(), REQUEST_TIME is not exact enough.
    $timestamp = time();
    $this->backdropPost(NULL, NULL, t('Cancel account'));
    $this->assertText(t('A confirmation request to cancel your account has been sent to your e-mail address.'), 'Account cancellation request mailed message displayed.');

    // Confirm account cancellation request.
    $this->backdropGet("user/$recipient2->uid/cancel/confirm/$timestamp/" . user_pass_rehash($recipient2->pass, $timestamp, $recipient2->login, $recipient2->uid));
    $this->assertFalse(user_load($recipient2->uid, TRUE), 'User is not found in the database.');

    // Simpletest thinks that we are still logged in.
    $this->loggedInUser = NULL;

    $this->backdropLogin($admin);
    $this->backdropGet('messages/view/' . $return['message']->thread_id);
    $this->assertText($body1, 'First message is still displayed');
    $this->assertNoText($edit['body[value]'], t('Reply of deleted user is not displayed anymore'));

    // Test if admin is allowed to delete messages of other users.
    $this->backdropGet('user/' . $author->uid . '/messages');
    $this->checkThreadDelete($return['message']);

    // Check if user is allowed to delete messages.
    $this->backdropLogin($author);
    $this->backdropGet('messages');
    $this->checkThreadDelete($return['message']);

    // Check that deleting users that didn't send any message does not cause
    // errors.
    $this->backdropLogin($dummy);

    // Reload user object, don't use the cache.
    $dummy = user_load($dummy->uid, TRUE);

    // Attempt to cancel account.
    $this->backdropGet('user/' . $dummy->uid . '/edit');
    $this->backdropPost(NULL, NULL, t('Cancel account'));

    // Confirm account cancellation.
    // Explicitly use time(), REQUEST_TIME is not exact enough.
    $timestamp = time();
    $this->backdropPost(NULL, NULL, t('Cancel account'));

    // Confirm account cancellation request.
    $this->backdropGet("user/$dummy->uid/cancel/confirm/$timestamp/" . user_pass_rehash($dummy->pass, $timestamp, $dummy->login, $dummy->uid));
  }

  function checkThreadDelete($message) {
    $this->assertText($message->subject, t('Message is displayed.'));

    $delete = array(
      'list[' . $message->thread_id . ']' => 1,
    );
    $this->backdropPost(NULL, $delete, t('Delete'));
    $this->assertText(t('Deleted @count thread.', array('@count' => 1)), t('Delete message displayed.'));
    $this->assertNoText($message->subject, t('Message is not displayed anymore.'));
    $this->assertText(t('No messages available.'), t('No messages available anymore.'));

    // Revert delete action.
    $this->clickLink(t('undone'));

    $this->assertText(t('Restored @count thread.', array('@count' => 1)), t('Restore message displayed'));
    $this->assertText($message->subject, t('Message is displayed again.'));
    $this->assertNoText(t('No messages available.'), t('Messages are available.'));
  }

  /**
   * Test preview functionality.
   */
  function testPreview() {
    $user = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));

    // Enable preview button.
    config_set('privatemsg.settings', 'display_preview_button', TRUE);

    $message = array(
      'recipient' => $user->name,
      'subject' => $this->randomName(),
      'body[value]' => $this->randomName(50),
    );
    $this->backdropLogin($user);

    // Preview message.
    $this->backdropPost('messages/new', $message, t('Preview message'));
    $this->assertTitle(t('Write new message to @user | Backdrop CMS', array('@user' => $user->name)), t('Correct title is displayed.'));
    $this->assertFieldByXPath($this->buildXPathQuery('//div[@class=:class]/p', array(':class' => 'privatemsg-message-body')), $message['body[value]'], t('Message body is previewed'));
    $this->assertFieldByName('body[value]', $message['body[value]'], t('Message body field has the correct default value.'));

    // Send message.
    $this->backdropPost(NULL, array(), t('Send message'));
    $this->assertText($message['subject'], t('Message subject is displayed.'));
    $this->assertText($message['body[value]'], t('Message body is displayed.'));

    $this->assertText(t('A message has been sent to @recipient.', array('@recipient' => $user->name)), t('Sent confirmation displayed.'));

  }

  /**
   * Test autocomplete.
   */
  function testAutocomplete() {
    $current = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));
    $user1 = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));
    $user2 = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));
    $user3 = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));

    $this->backdropLogin($current);

    // Use specific names to be able to test for specific name combinations.
    $current->name = 'whatever';
    user_save($current);
    $user1->name = 'aaaa';
    user_save($user1);
    $user2->name = 'aaab';
    user_save($user2);
    $user3->name = 'bbbb';
    user_save($user3);

    $autocomplete = (array)$this->backdropGetAJAX('messages/autocomplete/aa');
    $this->assertEqual(count($autocomplete), 2, t('Autocomplete object contains two suggestions.'));
    $this->assertEqual($autocomplete['aaaa, '], 'aaaa');
    $this->assertEqual($autocomplete['aaab, '], 'aaab');

    $autocomplete = (array)$this->backdropGetAJAX('messages/autocomplete/bb');
    $this->assertEqual(count($autocomplete), 1, t('Autocomplete object contains one suggestion.'));
    $this->assertEqual($autocomplete['bbbb, '], 'bbbb');

    $autocomplete = (array)$this->backdropGetAJAX('messages/autocomplete/cc');
    $this->assertEqual(count($autocomplete), 0, t('Autocomplete object contains no suggestions.'));

    $autocomplete = (array)$this->backdropGetAJAX('messages/autocomplete/aaaa, a');
    $this->assertEqual(count($autocomplete), 1, t('Autocomplete object contains one suggestion.'));
    $this->assertEqual($autocomplete['aaaa, aaab, '], 'aaab');

    // Test XSS protection, create a username and check that the suggestion is
    // safe.
    $user4 = $this->backdropCreateUser(array('read privatemsg', 'write privatemsg'));
    $user4->name = "<script>alert('XSS')</script>";
    $user4 = user_save($user4);

    $autocomplete = (array)$this->backdropGetAJAX('messages/autocomplete/<sc');
    $this->assertEqual(count($autocomplete), 1, t('Autocomplete object contains one suggestion.'));
    $suggestion = reset($autocomplete);
    $this->assertEqual($suggestion, strip_tags($suggestion), t('Autocomplete suggestion is safe.'));
  }

  /**
   * Implements tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }
}
